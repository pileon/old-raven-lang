language: c++
sudo: false

addons:
  apt:
    packages:
      - valgrind
      - g++-6
    sources: &sources
      - ubuntu-toolchain-r-test

matrix:
  exclude:
    - env: TRAVIS_EMPTY_JOB_WORKAROUND=true

  include:
    - os: linux
      env: LLVM_VERSION=3.8.0 BOOST_VERSION=1.61.0 CMAKE_VERSION=3.5.2 BUILD_TYPE=Debug BUILD_TESTS=1
      compiler: clang

#    - os: linux
#      env: LLVM_VERSION=3.8.0 BOOST_VERSION=1.61.0 CMAKE_VERSION=3.5.2 BUILD_TYPE=Release
#      compiler: clang

install:
  - DEPS_DIR="${TRAVIS_BUILD_DIR}/deps"
  - mkdir ${DEPS_DIR} && cd ${DEPS_DIR}

  # Default versions
  - if [[ "${LLVM_VERSION:-default}" == "default" ]]; then LLVM_VERSION=3.8.0; fi
  - if [[ "${BOOST_VERSION:-default}" == "default" ]]; then BOOST_VERSION=1.61.0; fi
  - if [[ "${CMAKE_VERSION:-default}" == "default" ]]; then CMAKE_VERSION=3.5.2; fi

  - if [[ "${BUILD_TYPE}" == "" ]]; then BUILD_TYPE=Release; fi
  - if [[ "${COMPILER}" != "" ]]; then export CXX=${COMPILER}; fi

  # Boost headers
  - BOOST_URL="http://sourceforge.net/projects/boost/files/boost/${BOOST_VERSION}/boost_${BOOST_VERSION//./_}.tar.gz"
  - if [[ "${BOOST_URL}" != "" ]]; then mkdir boost && travis_retry wget --quiet -O - ${BOOST_URL} | tar --strip-components=1 -xz -C boost; fi
  - if [[ -d ${DEPS_DIR}/boost ]]; then CMAKE_OPTIONS+=" -DBOOST_ROOT=${DEPS_DIR}/boost"; fi

  # Install CMake
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      CMAKE_URL="http://www.cmake.org/files/v${CMAKE_VERSION%.*}/cmake-${CMAKE_VERSION}-Linux-x86_64.tar.gz"
      mkdir cmake && travis_retry wget --no-check-certificate --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake
      export PATH=${DEPS_DIR}/cmake/bin:${PATH}
    else
      brew install cmake
    fi

  # Install clang
  - |
    if [[ "${LLVM_VERSION}" != "" ]]; then
      CLANG_URL="http://llvm.org/releases/${LLVM_VERSION}/clang+llvm-${LLVM_VERSION}-x86_64-linux-gnu-ubuntu-14.04.tar.xz"
      mkdir clang && travis_retry wget --quiet -O - ${CLANG_URL} | tar --strip-components=1 -xJ -C clang
      export PATH="${DEPS_DIR}/clang/bin:${PATH}"
    fi

  # Install libc++ and libc++abi (on Linux only; Xcode uses libc++ by default)
  - |
    if [[ "${LLVM_VERSION}" != "" ]]; then
      if [[ "${LLVM_VERSION}" != "trunk" ]]; then
        LLVM_URL="http://llvm.org/releases/${LLVM_VERSION}/llvm-${LLVM_VERSION}.src.tar.xz"
        LIBCXX_URL="http://llvm.org/releases/${LLVM_VERSION}/libcxx-${LLVM_VERSION}.src.tar.xz"
        LIBCXXABI_URL="http://llvm.org/releases/${LLVM_VERSION}/libcxxabi-${LLVM_VERSION}.src.tar.xz"
        TAR_FLAGS="-xJ"
      else
        LLVM_URL="https://github.com/llvm-mirror/llvm/archive/master.tar.gz"
        LIBCXX_URL="https://github.com/llvm-mirror/libcxx/archive/master.tar.gz"
        LIBCXXABI_URL="https://github.com/llvm-mirror/libcxxabi/archive/master.tar.gz"
        TAR_FLAGS="-xz"
      fi
      mkdir -p llvm llvm/build llvm/projects/libcxx llvm/projects/libcxxabi
      travis_retry wget --quiet -O - ${LLVM_URL} | tar --strip-components=1 ${TAR_FLAGS} -C llvm
      travis_retry wget --quiet -O - ${LIBCXX_URL} | tar --strip-components=1 ${TAR_FLAGS} -C llvm/projects/libcxx
      travis_retry wget --quiet -O - ${LIBCXXABI_URL} | tar --strip-components=1 ${TAR_FLAGS} -C llvm/projects/libcxxabi
      (cd llvm/build && cmake .. -DCMAKE_INSTALL_PREFIX=${DEPS_DIR}/llvm/install -DCMAKE_CXX_COMPILER=clang++)
      (cd llvm/build/projects/libcxx && make install -j2)
      (cd llvm/build/projects/libcxxabi && make install -j2)
      export CXXFLAGS="-nostdinc++ -isystem ${DEPS_DIR}/llvm/install/include/c++/v1"
      export LDFLAGS="-L${DEPS_DIR}/llvm/install/lib -lc++ -lc++abi"
      export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${DEPS_DIR}/llvm/install/lib"
    fi

  # Install a recent Doxygen
  - |
    if [[ "${DOCUMENTATION}" == "true" ]]; then
      DOXYGEN_URL="http://ftp.stack.nl/pub/users/dimitri/doxygen-1.8.10.linux.bin.tar.gz"
      mkdir doxygen && travis_retry wget --quiet -O - ${DOXYGEN_URL} | tar --strip-components=1 -xz -C doxygen
      export PATH=${DEPS_DIR}/doxygen/bin:${PATH}
    fi

before_script:
  # Set the git identity (for pushing the documentation and the benchmarks)
  - git config --global user.name "Travis bot"

  # Go back to the root of the project and setup the build directory
  - cd ${TRAVIS_BUILD_DIR}
  - (mkdir build && cd build && cmake .. -DCMAKE_CXX_COMPILER=${CXX} -DCMAKE_BUILD_TYPE=${BUILD_TYPE:-Release} ${CMAKE_OPTIONS})

script:
  - cd build && cmake --build . --target raven_lang
  - |
    if [[ "${BUILD_TESTS:-0}" != "0" ]]; then
      (cd build; cmake --build . --target test_lexer) || true
    fi
  - |
    if [[ "${BUILD_TESTS:-0}" != "0" ]]; then
      (cd build; cmake --build . --target test_diagnostics) || true
    fi
